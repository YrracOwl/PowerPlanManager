//电源计划管理

//创建互斥体
import process.mutex;
var mutex = process.mutex("9971187F-7F13-4B19-9D81-5BAB80E66EF0") 
if( mutex.conflict ){
    import win.ui.atom;
    var atom,hwndConflict = win.ui.atom.find("D3891FF7-3981-4F78-92AE-B15287457D40")
    if( hwndConflict ) {
    	win.show(hwndConflict,true);
    	win.setForeground(hwndConflict);
    	import win.dlg.message;
    	win.msgbox("程序已启动，请检查任务栏托盘按钮并双击！","程序已启动")
    }
    return;
} 


import config;
import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
mainForm = win.form(text="电源计划管理器";right=391;bottom=87;border="thin";max=false)
mainForm.add(
changeTo={cls="plus";text="更改至";left=16;top=16;right=112;bottom=40;align="left";bgcolor=-5197169;iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=20}};iconText='\uF124';notify=1;textPadding={left=39};z=2};
combobox={cls="combobox";left=136;top=16;right=384;bottom=40;edge=1;font=LOGFONT(h=-14);items={};mode="dropdown";z=3};
log={cls="static";left=136;top=48;right=328;bottom=80;center=1;transparent=1;z=1};
settings={cls="plus";text="设置";left=328;top=56;right=392;bottom=80;align="left";color=3947580;iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=8}};iconText='\uF013';notify=1;textPadding={left=25};z=5};
static={cls="static";text="当前电源计划为：";left=16;top=48;right=128;bottom=80;center=1;transparent=1;z=4}
)
/*}}*/

import win.ui.atom 
mainForm.atom("D3891FF7-3981-4F78-92AE-B15287457D40"); 

mainForm.settings.skin({
	color={
		active=0xFF00FF00;
		default=0xFF3C3C3C;
		disabled=0xFF6D6D6D;
		hover=0xFFFF0000
	}
})

mainForm.changeTo.skin({
	background={
		default=0x668FB2B0;
		disabled=0xFFCCCCCC;
		hover=0xFF928BB3
	};
	color={
		default=0xFF000000;
		disabled=0xFF6D6D6D
	}
})

if(!config.mainform.unlock){
	config.mainform.unlock = true;
	config.mainform.loopTime = 3000;
}


import win.util.tray;
mainForm.tray = win.util.tray(mainForm)
mainForm.tray.tip = "电源计划管理器" //设置鼠标提示

mainForm.onTrayMessage = {
	[0x205/*_WM_RBUTTONUP*/  ] = function(wParam){ 
		win.setForeground(mainForm.hwnd)
		import win.ui.menu;
		
		mainForm.popmenu = win.ui.popmenu(mainForm);//创建弹出菜单
		mainForm.popmenu.add('&设置',function(id){
			var settingsWin = mainForm.loadForm("\dlg\settings.aardio");
			settingsWin.doModal();
		});
		mainForm.popmenu.add('&打开',function(id){
			//在下面输入菜单响应代码
			mainForm.show(true)
		});
		mainForm.popmenu.add();//分隔线
		mainForm.popmenu.add('&退出',function(id){
			mainForm.close();
		});
	    mainForm.popmenu.popup()
	};
	[0x203/*_WM_LBUTTONDBLCLK*/] = function(wParam){ 
		win.setForeground(mainForm.hwnd)
		mainForm.show(true)
	};
}

import win.reg;
import config;


import sys.power;
var schemeGuidTable = {}; 

//开机启动相关
if(config.mainform.startup){
	if(config.mainform.powerUp){
		if(sys.power.currentScheme() === config.mainform.startup){
			if(config.mainform.pop){
				mainForm.tray.pop(string.concat("当前模式为：",config.mainform.startupName),"当前模式")
			}
		}
		else {
			sys.power.command("/setactive", config.mainform.startup);
			if(config.mainform.pop){
				mainForm.tray.pop(string.concat("切换为",config.mainform.startupName),"切换电源模式",2)
			}
		}	
	}
}

win.delay(300)

//填充log.text与combobox内容
var schemeList = sys.power.list(); 
for i,v in table.eachIndex(schemeList){
	if(v.active){
		mainForm.log.text = v.name;
	}
	schemeGuidTable[[v.name]] = v.guid;
	mainForm.combobox.add(v.name);
}

config.mainform.save()

//点击即针对config进行保存，同时修改线程变量
mainForm.changeTo.oncommand = function(id,event){
	config.mainform.unlock = false;
	thread.set("unlock", config.mainform.unlock)
	var guid = schemeGuidTable[[mainForm.combobox.selText]]; 
	sys.power.command("/setactive", guid);
	mainForm.log.text = "查询中..."
	thread.invokeAndWait(
		function(){
			sleep(200)
			import sys.power;
			var schemeListNow = sys.power.list(); 
			for i,v in table.eachIndex(schemeListNow){
				if(v.active){
					thread.set("Activation", v.name);
					thread.set("Guid", v.guid)
				}
			}
		} 
	)

	mainForm.log.text = thread.get("Activation");
	config.mainform.startupName = thread.get("Activation");
	config.mainform.startup = thread.get("Guid");
	config.mainform.unlock = true;
	config.mainform.save();
	if(config.mainform.pop){
		mainForm.tray.pop(string.concat("电源模式已切换到",config.mainform.startupName),"电源模式切换")
	}
	thread.set("watchPlan", config.mainform.watchPlan)
	thread.set("startup", config.mainform.startup)
	thread.set("startupName", config.mainform.startupName)
	thread.set("pop", config.mainform.pop)
	thread.set("unlock", config.mainform.unlock)
	thread.set("loopTime", config.mainform.loopTime)
}

//窗口显示或者隐藏前，更新log.text内容
/*
mainForm.beforeShowWindow = function(shown,status){ 
	var currentSchemeUI = sys.power.currentScheme();
	var currentSchemeName = table.find(schemeGuidTable,currentSchemeUI);
	mainForm.log.text = currentSchemeName;
}
*/

thread.invoke( 
	function(mainForm,schemeGuidTable){
		import sys.power;
		while(true){
			var currentSchemeUI = sys.power.currentScheme();
			var currentSchemeName = table.find(schemeGuidTable,currentSchemeUI);
			mainForm.log.text = currentSchemeName;
			sleep(1000)
		}
	},mainForm,schemeGuidTable
)


mainForm.settings.oncommand = function(id,event){
	var settingsWin = mainForm.loadForm("\dlg\settings.aardio");
	settingsWin.doModal();
}

import sys.runAsTask;
startUp = sys.runAsTask("PowerPlanManagerv1","控制电脑的电源管理计划","YrracOwl");

//import sys.run;
//startUp = sys.run("PowerPlanManager_v1.0.0","控制电脑的电源管理计划","YrracOwl");


var watchThreadFunc = function(mainForm){
	sleep(2000)
	import sys.power;
	import win.util.tray;
	while(true){
		var tunlock = thread.get("unlock");
		var tloopTime = thread.get("loopTime"); 
		var twatchPlan = thread.get("watchPlan");
		sleep(tloopTime)//轮询时间
		if(tunlock and twatchPlan){
			var tstartup = thread.get("startup");
			var tstartupName = thread.get("startupName");
			var tpop = thread.get("pop");
			
			var currentScheme = sys.power.currentScheme();
			if(currentScheme !== tstartup){
				sys.power.command("/setactive", tstartup);
				sleep(200)
				mainForm.log.text = tstartupName;
				if(tpop){
					win.util.tray(winform).pop(string.concat("已将电源计划恢复为",tstartupName),"恢复默认",2)
				}
			}
		}
	}
} 

var watchThrdHandle,watchThrdId = thread.create(watchThreadFunc,mainForm);

var watchPowerPlanFunc = function(mainForm,schemeGuidTable){
	import sys.power;
	while(true){
		var currentSchemeUI = sys.power.currentScheme();
		var currentSchemeName = table.find(schemeGuidTable,currentSchemeUI);
		mainForm.log.text = currentSchemeName;
		sleep(1000)
	}
}

var watchPowerPlanHandle,watchPowerPlanId = thread.create(watchPowerPlanFunc,mainForm,schemeGuidTable); 


mainForm.onClose = function(hwnd,message,wParam,lParam){
    	//给线程发送退出消息
    	//此方法保证不会在重启时出现内存读写错误
		//::PostThreadMessage(watchThrdId,0x12/*_WM_QUIT*/,0,0)
		//::PostThreadMessage(watchPowerPlanId,0x12/*_WM_QUIT*/,0,0)
		//thread.waitClose(watchThrdHandle)
		//raw.closehandle(watchThrdHandle);
		config.mainform.save();
		//mainForm.tray.delete();
}

mainForm.onMinimize = function(lParam){
	if(config.mainform.noClose){
		mainForm.tray = win.util.tray(mainForm);
		mainForm.show(false);
		return true;
	}

}

mainForm.wndproc = function(hwnd,message,wParam,lParam){
	select( message ) { 
		case 0x18/*_WM_SHOWWINDOW*/{
			thread.set("watchPlan", config.mainform.watchPlan)
			thread.set("startup", config.mainform.startup)
			thread.set("startupName", config.mainform.startupName)
			thread.set("pop", config.mainform.pop)
			thread.set("unlock", config.mainform.unlock)
			thread.set("loopTime", config.mainform.loopTime)
		}
		else{
			
		}
	}
	//无返回值则继续调用默认回调函数
}


//若当前程序不以管理员权限运行，则弹出窗口提示用户，并关闭程序
import process.admin;
if(process.admin.isRunAs()){
	mainForm.show();
}
else {
	var askForAdmin = mainForm.loadForm("\dlg\askForAdmin.aardio");
	win.util.tray(winform).pop(string.concat("请以管理员身份运行此程序！"),"权限错误",3)
	if(askForAdmin.doModal(mainForm) === "关闭程序"){
		mainForm.close();
	}
}

return win.loopMessage();